// vite.config.mts
import react from "file:///C:/langflow-main/src/frontend/node_modules/@vitejs/plugin-react-swc/index.mjs";
import { defineConfig, loadEnv } from "file:///C:/langflow-main/src/frontend/node_modules/vite/dist/node/index.js";
import svgr from "file:///C:/langflow-main/src/frontend/node_modules/vite-plugin-svgr/dist/index.js";
import tsconfigPaths from "file:///C:/langflow-main/src/frontend/node_modules/vite-tsconfig-paths/dist/index.mjs";

// src/customization/config-constants.ts
var BASENAME = "";
var PORT = 3e3;
var PROXY_TARGET = "http://127.0.0.1:7860";
var API_ROUTES = ["^/api/v1/", "/api/v2/", "/health"];

// vite.config.mts
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  const apiRoutes = API_ROUTES || ["^/api/v1/", "/health"];
  const target = env.VITE_PROXY_TARGET || PROXY_TARGET || "http://127.0.0.1:7860";
  const port = Number(env.VITE_PORT) || PORT || 3e3;
  const proxyTargets = apiRoutes.reduce((proxyObj, route) => {
    proxyObj[route] = {
      target,
      changeOrigin: true,
      secure: false,
      ws: true
    };
    return proxyObj;
  }, {});
  return {
    base: BASENAME || "",
    build: {
      outDir: "build"
    },
    define: {
      "process.env.BACKEND_URL": JSON.stringify(env.BACKEND_URL),
      "process.env.ACCESS_TOKEN_EXPIRE_SECONDS": JSON.stringify(
        env.ACCESS_TOKEN_EXPIRE_SECONDS
      ),
      "process.env.CI": JSON.stringify(env.CI)
    },
    plugins: [react(), svgr(), tsconfigPaths()],
    server: {
      port,
      proxy: {
        ...proxyTargets
      },
      host: true,
      cors: true,
      headers: {
        "Access-Control-Allow-Origin": "*"
      },
      hmr: {
        host: "localhost"
      },
      allowedHosts: [
        "0d21-159-31-1-1.ngrok-free.app",
        "fa47-159-31-1-1.ngrok-free.app",
        ".ngrok-free.app"
        // This will allow any ngrok subdomain
      ]
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInNyYy9jdXN0b21pemF0aW9uL2NvbmZpZy1jb25zdGFudHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxsYW5nZmxvdy1tYWluXFxcXHNyY1xcXFxmcm9udGVuZFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcbGFuZ2Zsb3ctbWFpblxcXFxzcmNcXFxcZnJvbnRlbmRcXFxcdml0ZS5jb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9sYW5nZmxvdy1tYWluL3NyYy9mcm9udGVuZC92aXRlLmNvbmZpZy5tdHNcIjtpbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBsb2FkRW52IH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBzdmdyIGZyb20gXCJ2aXRlLXBsdWdpbi1zdmdyXCI7XG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xuaW1wb3J0IHtcbiAgQVBJX1JPVVRFUyxcbiAgQkFTRU5BTUUsXG4gIFBPUlQsXG4gIFBST1hZX1RBUkdFVCxcbn0gZnJvbSBcIi4vc3JjL2N1c3RvbWl6YXRpb24vY29uZmlnLWNvbnN0YW50c1wiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiB7XG4gIGNvbnN0IGVudiA9IGxvYWRFbnYobW9kZSwgcHJvY2Vzcy5jd2QoKSwgXCJcIik7XG5cbiAgY29uc3QgYXBpUm91dGVzID0gQVBJX1JPVVRFUyB8fCBbXCJeL2FwaS92MS9cIiwgXCIvaGVhbHRoXCJdO1xuXG4gIGNvbnN0IHRhcmdldCA9XG4gICAgZW52LlZJVEVfUFJPWFlfVEFSR0VUIHx8IFBST1hZX1RBUkdFVCB8fCBcImh0dHA6Ly8xMjcuMC4wLjE6Nzg2MFwiO1xuXG4gIGNvbnN0IHBvcnQgPSBOdW1iZXIoZW52LlZJVEVfUE9SVCkgfHwgUE9SVCB8fCAzMDAwO1xuXG4gIGNvbnN0IHByb3h5VGFyZ2V0cyA9IGFwaVJvdXRlcy5yZWR1Y2UoKHByb3h5T2JqLCByb3V0ZSkgPT4ge1xuICAgIHByb3h5T2JqW3JvdXRlXSA9IHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIHdzOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIHByb3h5T2JqO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHtcbiAgICBiYXNlOiBCQVNFTkFNRSB8fCBcIlwiLFxuICAgIGJ1aWxkOiB7XG4gICAgICBvdXREaXI6IFwiYnVpbGRcIixcbiAgICB9LFxuICAgIGRlZmluZToge1xuICAgICAgXCJwcm9jZXNzLmVudi5CQUNLRU5EX1VSTFwiOiBKU09OLnN0cmluZ2lmeShlbnYuQkFDS0VORF9VUkwpLFxuICAgICAgXCJwcm9jZXNzLmVudi5BQ0NFU1NfVE9LRU5fRVhQSVJFX1NFQ09ORFNcIjogSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIGVudi5BQ0NFU1NfVE9LRU5fRVhQSVJFX1NFQ09ORFMsXG4gICAgICApLFxuICAgICAgXCJwcm9jZXNzLmVudi5DSVwiOiBKU09OLnN0cmluZ2lmeShlbnYuQ0kpLFxuICAgIH0sXG4gICAgcGx1Z2luczogW3JlYWN0KCksIHN2Z3IoKSwgdHNjb25maWdQYXRocygpXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IHBvcnQsXG4gICAgICBwcm94eToge1xuICAgICAgICAuLi5wcm94eVRhcmdldHMsXG4gICAgICB9LFxuICAgICAgaG9zdDogdHJ1ZSxcbiAgICAgIGNvcnM6IHRydWUsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgfSxcbiAgICAgIGhtcjoge1xuICAgICAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxuICAgICAgfSxcbiAgICAgIGFsbG93ZWRIb3N0czogW1xuICAgICAgICBcIjBkMjEtMTU5LTMxLTEtMS5uZ3Jvay1mcmVlLmFwcFwiLFxuICAgICAgICBcImZhNDctMTU5LTMxLTEtMS5uZ3Jvay1mcmVlLmFwcFwiLFxuICAgICAgICBcIi5uZ3Jvay1mcmVlLmFwcFwiICAvLyBUaGlzIHdpbGwgYWxsb3cgYW55IG5ncm9rIHN1YmRvbWFpblxuICAgICAgXSxcbiAgICB9LFxuICB9O1xufSk7XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXGxhbmdmbG93LW1haW5cXFxcc3JjXFxcXGZyb250ZW5kXFxcXHNyY1xcXFxjdXN0b21pemF0aW9uXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxsYW5nZmxvdy1tYWluXFxcXHNyY1xcXFxmcm9udGVuZFxcXFxzcmNcXFxcY3VzdG9taXphdGlvblxcXFxjb25maWctY29uc3RhbnRzLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9sYW5nZmxvdy1tYWluL3NyYy9mcm9udGVuZC9zcmMvY3VzdG9taXphdGlvbi9jb25maWctY29uc3RhbnRzLnRzXCI7ZXhwb3J0IGNvbnN0IEJBU0VOQU1FID0gXCJcIjtcbmV4cG9ydCBjb25zdCBQT1JUID0gMzAwMDtcbmV4cG9ydCBjb25zdCBQUk9YWV9UQVJHRVQgPSBcImh0dHA6Ly8xMjcuMC4wLjE6Nzg2MFwiO1xuZXhwb3J0IGNvbnN0IEFQSV9ST1VURVMgPSBbXCJeL2FwaS92MS9cIiwgXCIvYXBpL3YyL1wiLCBcIi9oZWFsdGhcIl07XG5leHBvcnQgY29uc3QgQkFTRV9VUkxfQVBJID0gXCIvYXBpL3YxL1wiO1xuZXhwb3J0IGNvbnN0IEhFQUxUSF9DSEVDS19VUkwgPSBcIi9oZWFsdGhfY2hlY2tcIjtcbmV4cG9ydCBjb25zdCBET0NTX0xJTksgPSBcImh0dHBzOi8vZG9jcy5sYW5nZmxvdy5vcmdcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBET0NTX0xJTkssXG4gIEJBU0VOQU1FLFxuICBQT1JULFxuICBQUk9YWV9UQVJHRVQsXG4gIEFQSV9ST1VURVMsXG4gIEJBU0VfVVJMX0FQSSxcbiAgSEVBTFRIX0NIRUNLX1VSTCxcbn07XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW1SLE9BQU8sV0FBVztBQUNyUyxTQUFTLGNBQWMsZUFBZTtBQUN0QyxPQUFPLFVBQVU7QUFDakIsT0FBTyxtQkFBbUI7OztBQ0hrVSxJQUFNLFdBQVc7QUFDdFcsSUFBTSxPQUFPO0FBQ2IsSUFBTSxlQUFlO0FBQ3JCLElBQU0sYUFBYSxDQUFDLGFBQWEsWUFBWSxTQUFTOzs7QURRN0QsSUFBTyxzQkFBUSxhQUFhLENBQUMsRUFBRSxLQUFLLE1BQU07QUFDeEMsUUFBTSxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQUksR0FBRyxFQUFFO0FBRTNDLFFBQU0sWUFBWSxjQUFjLENBQUMsYUFBYSxTQUFTO0FBRXZELFFBQU0sU0FDSixJQUFJLHFCQUFxQixnQkFBZ0I7QUFFM0MsUUFBTSxPQUFPLE9BQU8sSUFBSSxTQUFTLEtBQUssUUFBUTtBQUU5QyxRQUFNLGVBQWUsVUFBVSxPQUFPLENBQUMsVUFBVSxVQUFVO0FBQ3pELGFBQVMsS0FBSyxJQUFJO0FBQUEsTUFDaEI7QUFBQSxNQUNBLGNBQWM7QUFBQSxNQUNkLFFBQVE7QUFBQSxNQUNSLElBQUk7QUFBQSxJQUNOO0FBQ0EsV0FBTztBQUFBLEVBQ1QsR0FBRyxDQUFDLENBQUM7QUFFTCxTQUFPO0FBQUEsSUFDTCxNQUFNLFlBQVk7QUFBQSxJQUNsQixPQUFPO0FBQUEsTUFDTCxRQUFRO0FBQUEsSUFDVjtBQUFBLElBQ0EsUUFBUTtBQUFBLE1BQ04sMkJBQTJCLEtBQUssVUFBVSxJQUFJLFdBQVc7QUFBQSxNQUN6RCwyQ0FBMkMsS0FBSztBQUFBLFFBQzlDLElBQUk7QUFBQSxNQUNOO0FBQUEsTUFDQSxrQkFBa0IsS0FBSyxVQUFVLElBQUksRUFBRTtBQUFBLElBQ3pDO0FBQUEsSUFDQSxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxjQUFjLENBQUM7QUFBQSxJQUMxQyxRQUFRO0FBQUEsTUFDTjtBQUFBLE1BQ0EsT0FBTztBQUFBLFFBQ0wsR0FBRztBQUFBLE1BQ0w7QUFBQSxNQUNBLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxRQUNQLCtCQUErQjtBQUFBLE1BQ2pDO0FBQUEsTUFDQSxLQUFLO0FBQUEsUUFDSCxNQUFNO0FBQUEsTUFDUjtBQUFBLE1BQ0EsY0FBYztBQUFBLFFBQ1o7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
