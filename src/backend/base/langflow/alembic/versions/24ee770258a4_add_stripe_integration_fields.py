"""Add Stripe integration fields

Revision ID: 24ee770258a4
Revises: 50578361aed6
Create Date: 2025-04-13 18:25:56.657285

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '24ee770258a4'
down_revision: Union[str, None] = '50578361aed6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if 'stripeevent' not in tables:
        op.create_table('stripeevent',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('stripe_event_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('api_version', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('data', sa.JSON(), nullable=False),
        sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('received_at', sa.DateTime(), nullable=False),
        sa.Column('processed_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('stripeevent', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_stripeevent_status'), ['status'], unique=False)
            batch_op.create_index(batch_op.f('ix_stripeevent_stripe_event_id'), ['stripe_event_id'], unique=True)
            batch_op.create_index(batch_op.f('ix_stripeevent_type'), ['type'], unique=False)

    # Check if the daily_usage_summary table exists
    if 'daily_usage_summary' in tables:
        # Get the indexes for the daily_usage_summary table
        indexes = inspector.get_indexes('daily_usage_summary')
        index_names = [index['name'] for index in indexes]
        
        with op.batch_alter_table('daily_usage_summary', schema=None) as batch_op:
            # Only drop indexes if they exist
            if 'ix_daily_usage_summary_billing_period_id' in index_names:
                batch_op.drop_index('ix_daily_usage_summary_billing_period_id')
            if 'ix_daily_usage_summary_flow_id' in index_names:
                batch_op.drop_index('ix_daily_usage_summary_flow_id')
            
            # Check if columns exist before dropping them
            columns = inspector.get_columns('daily_usage_summary')
            column_names = [column['name'] for column in columns]
            
            if 'billing_period_id' in column_names:
                batch_op.drop_column('billing_period_id')
            if 'flow_id' in column_names:
                batch_op.drop_column('flow_id')

    with op.batch_alter_table('folder', schema=None) as batch_op:
        # Check if columns exist before dropping them
        if 'folder' in tables:
            columns = inspector.get_columns('folder')
            column_names = [column['name'] for column in columns]
            
            if 'created_at' in column_names:
                batch_op.drop_column('created_at')
            if 'updated_at' in column_names:
                batch_op.drop_column('updated_at')

    # Check if invoice table exists and get its columns
    if 'invoice' in tables:
        columns = inspector.get_columns('invoice')
        column_names = [column['name'] for column in columns]
        
        with op.batch_alter_table('invoice', schema=None) as batch_op:
            # Only add columns if they don't already exist
            if 'stripe_invoice_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_invoice_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            if 'stripe_payment_intent_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_payment_intent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            if 'stripe_invoice_url' not in column_names:
                batch_op.add_column(sa.Column('stripe_invoice_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            
            # Create indexes only if the columns were added
            if 'stripe_invoice_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_invoice_stripe_invoice_id'), ['stripe_invoice_id'], unique=False)
            if 'stripe_payment_intent_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_invoice_stripe_payment_intent_id'), ['stripe_payment_intent_id'], unique=False)
    else:
        # If invoice table doesn't exist yet, create it with the stripe columns
        with op.batch_alter_table('invoice', schema=None) as batch_op:
            batch_op.add_column(sa.Column('stripe_invoice_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.add_column(sa.Column('stripe_payment_intent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.add_column(sa.Column('stripe_invoice_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.create_index(batch_op.f('ix_invoice_stripe_invoice_id'), ['stripe_invoice_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_invoice_stripe_payment_intent_id'), ['stripe_payment_intent_id'], unique=False)

    # Check if subscriptionplan table exists and get its columns
    if 'subscriptionplan' in tables:
        columns = inspector.get_columns('subscriptionplan')
        column_names = [column['name'] for column in columns]
        
        with op.batch_alter_table('subscriptionplan', schema=None) as batch_op:
            # Only add columns if they don't already exist
            if 'stripe_product_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_product_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            if 'stripe_default_price_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_default_price_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            
            # Create indexes only if the columns were added
            if 'stripe_default_price_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_subscriptionplan_stripe_default_price_id'), ['stripe_default_price_id'], unique=False)
            if 'stripe_product_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_subscriptionplan_stripe_product_id'), ['stripe_product_id'], unique=False)
    else:
        # If subscriptionplan table doesn't exist yet, create it with the stripe columns
        with op.batch_alter_table('subscriptionplan', schema=None) as batch_op:
            batch_op.add_column(sa.Column('stripe_product_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.add_column(sa.Column('stripe_default_price_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.create_index(batch_op.f('ix_subscriptionplan_stripe_default_price_id'), ['stripe_default_price_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_subscriptionplan_stripe_product_id'), ['stripe_product_id'], unique=False)

    # Check if user table exists and get its columns
    if 'user' in tables:
        columns = inspector.get_columns('user')
        column_names = [column['name'] for column in columns]
        
        with op.batch_alter_table('user', schema=None) as batch_op:
            # Only add columns if they don't already exist
            if 'stripe_customer_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_customer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            if 'stripe_subscription_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_subscription_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            if 'stripe_default_payment_method_id' not in column_names:
                batch_op.add_column(sa.Column('stripe_default_payment_method_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            
            # Create indexes only if the columns were added
            if 'stripe_customer_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_user_stripe_customer_id'), ['stripe_customer_id'], unique=False)
            if 'stripe_subscription_id' not in column_names:
                batch_op.create_index(batch_op.f('ix_user_stripe_subscription_id'), ['stripe_subscription_id'], unique=False)
    else:
        # If user table doesn't exist yet, create it with the stripe columns
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.add_column(sa.Column('stripe_customer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.add_column(sa.Column('stripe_subscription_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.add_column(sa.Column('stripe_default_payment_method_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
            batch_op.create_index(batch_op.f('ix_user_stripe_customer_id'), ['stripe_customer_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_user_stripe_subscription_id'), ['stripe_subscription_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if user table exists
    if 'user' in tables:
        columns = inspector.get_columns('user')
        column_names = [column['name'] for column in columns]
        indexes = inspector.get_indexes('user')
        index_names = [index['name'] for index in indexes]
        
        with op.batch_alter_table('user', schema=None) as batch_op:
            if 'ix_user_stripe_subscription_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_user_stripe_subscription_id'))
            if 'ix_user_stripe_customer_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_user_stripe_customer_id'))
            if 'stripe_default_payment_method_id' in column_names:
                batch_op.drop_column('stripe_default_payment_method_id')
            if 'stripe_subscription_id' in column_names:
                batch_op.drop_column('stripe_subscription_id')
            if 'stripe_customer_id' in column_names:
                batch_op.drop_column('stripe_customer_id')

    # Check if subscriptionplan table exists
    if 'subscriptionplan' in tables:
        columns = inspector.get_columns('subscriptionplan')
        column_names = [column['name'] for column in columns]
        indexes = inspector.get_indexes('subscriptionplan')
        index_names = [index['name'] for index in indexes]
        
        with op.batch_alter_table('subscriptionplan', schema=None) as batch_op:
            if 'ix_subscriptionplan_stripe_product_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_subscriptionplan_stripe_product_id'))
            if 'ix_subscriptionplan_stripe_default_price_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_subscriptionplan_stripe_default_price_id'))
            if 'stripe_default_price_id' in column_names:
                batch_op.drop_column('stripe_default_price_id')
            if 'stripe_product_id' in column_names:
                batch_op.drop_column('stripe_product_id')

    # Check if invoice table exists
    if 'invoice' in tables:
        columns = inspector.get_columns('invoice')
        column_names = [column['name'] for column in columns]
        indexes = inspector.get_indexes('invoice')
        index_names = [index['name'] for index in indexes]
        
        with op.batch_alter_table('invoice', schema=None) as batch_op:
            if 'ix_invoice_stripe_payment_intent_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_invoice_stripe_payment_intent_id'))
            if 'ix_invoice_stripe_invoice_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_invoice_stripe_invoice_id'))
            if 'stripe_invoice_url' in column_names:
                batch_op.drop_column('stripe_invoice_url')
            if 'stripe_payment_intent_id' in column_names:
                batch_op.drop_column('stripe_payment_intent_id')
            if 'stripe_invoice_id' in column_names:
                batch_op.drop_column('stripe_invoice_id')

    # Check if folder table exists
    if 'folder' in tables:
        with op.batch_alter_table('folder', schema=None) as batch_op:
            batch_op.add_column(sa.Column('updated_at', sa.DATETIME(), nullable=False))
            batch_op.add_column(sa.Column('created_at', sa.DATETIME(), nullable=False))

    # Check if stripeevent table exists
    if 'stripeevent' in tables:
        indexes = inspector.get_indexes('stripeevent')
        index_names = [index['name'] for index in indexes]
        
        with op.batch_alter_table('stripeevent', schema=None) as batch_op:
            if 'ix_stripeevent_type' in index_names:
                batch_op.drop_index(batch_op.f('ix_stripeevent_type'))
            if 'ix_stripeevent_stripe_event_id' in index_names:
                batch_op.drop_index(batch_op.f('ix_stripeevent_stripe_event_id'))
            if 'ix_stripeevent_status' in index_names:
                batch_op.drop_index(batch_op.f('ix_stripeevent_status'))

        op.drop_table('stripeevent')
    # ### end Alembic commands ###
