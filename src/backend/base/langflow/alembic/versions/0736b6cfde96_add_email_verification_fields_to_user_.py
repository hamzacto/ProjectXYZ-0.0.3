"""Add email verification fields to user table

Revision ID: 0736b6cfde96
Revises: 6049ac734dc9
Create Date: 2025-04-01 21:56:21.556407

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '0736b6cfde96'
down_revision: Union[str, None] = '6049ac734dc9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    
    # SQLite has limitations when adding NOT NULL columns to existing tables
    # We need to use batch operations to recreate the table
    
    # Step 1: Add columns without NOT NULL constraint first
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
        batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
        batch_op.add_column(sa.Column('verification_token_expiry', sa.DateTime(), nullable=True))
    
    # Step 2: Update existing rows with default values
    # For email, we'll use username + @example.com as a temporary value
    # For is_verified, we'll set existing users as verified (True)
    op.execute("UPDATE \"user\" SET email = username || '@example.com' WHERE email IS NULL")
    op.execute("UPDATE \"user\" SET is_verified = TRUE WHERE is_verified IS NULL")
    
    # Step 3: Alter columns to add NOT NULL constraints
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('email', existing_type=sqlmodel.sql.sqltypes.AutoString(), nullable=False)
        batch_op.alter_column('is_verified', existing_type=sa.Boolean(), nullable=False)
        
        # Create unique index for email
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)


def downgrade() -> None:
    conn = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))
        batch_op.drop_column('verification_token_expiry')
        batch_op.drop_column('verification_token')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('email')

    # ### end Alembic commands ###
