"""Initial migration based on current models

Revision ID: 50578361aed6
Revises: 
Create Date: 2025-04-13 03:47:45.923822

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '50578361aed6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # ### commands auto generated by Alembic - please adjust! ###
    if 'subscriptionplan' not in existing_tables:
        op.create_table('subscriptionplan',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('monthly_quota_credits', sa.Float(), nullable=False),
        sa.Column('max_flows', sa.Integer(), nullable=False),
        sa.Column('max_flow_runs_per_day', sa.Integer(), nullable=False),
        sa.Column('max_concurrent_flows', sa.Integer(), nullable=False),
        sa.Column('max_kb_storage_mb', sa.Integer(), nullable=False),
        sa.Column('max_kbs_per_user', sa.Integer(), nullable=False),
        sa.Column('max_kb_entries_per_kb', sa.Integer(), nullable=False),
        sa.Column('max_tokens_per_kb_entry', sa.Integer(), nullable=False),
        sa.Column('max_kb_queries_per_day', sa.Integer(), nullable=False),
        sa.Column('allowed_models', sa.JSON(), nullable=False),
        sa.Column('price_monthly_usd', sa.Float(), nullable=False),
        sa.Column('price_yearly_usd', sa.Float(), nullable=False),
        sa.Column('features', sa.JSON(), nullable=False),
        sa.Column('allowed_premium_tools', sa.JSON(), nullable=False),
        sa.Column('overage_price_per_credit', sa.Float(), nullable=False),
        sa.Column('default_overage_limit_usd', sa.Float(), nullable=False),
        sa.Column('allows_overage', sa.Boolean(), nullable=False),
        sa.Column('allows_rollover', sa.Boolean(), nullable=False),
        sa.Column('trial_days', sa.Integer(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('subscriptionplan', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_subscriptionplan_name'), ['name'], unique=False)

    if 'user' not in existing_tables:
        op.create_table('user',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('profile_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_superuser', sa.Boolean(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('verification_token_expiry', sa.DateTime(), nullable=True),
        sa.Column('oauth_provider', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('create_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('last_login_at', sa.DateTime(), nullable=True),
        sa.Column('credits_balance', sa.Float(), nullable=True),
        sa.Column('billing_day', sa.Integer(), nullable=True),
        sa.Column('subscription_plan_id', sa.Uuid(), nullable=True),
        sa.Column('subscription_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('subscription_start_date', sa.DateTime(), nullable=True),
        sa.Column('subscription_end_date', sa.DateTime(), nullable=True),
        sa.Column('trial_start_date', sa.DateTime(), nullable=True),
        sa.Column('trial_end_date', sa.DateTime(), nullable=True),
        sa.Column('trial_converted', sa.Boolean(), nullable=True),
        sa.Column('daily_flow_runs', sa.Integer(), nullable=True),
        sa.Column('daily_flow_runs_reset_at', sa.DateTime(), nullable=True),
        sa.Column('daily_kb_queries', sa.Integer(), nullable=True),
        sa.Column('daily_kb_queries_reset_at', sa.DateTime(), nullable=True),
        sa.Column('store_api_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscriptionplan.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
        )
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
            batch_op.create_index(batch_op.f('ix_user_subscription_plan_id'), ['subscription_plan_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    if 'apikey' not in existing_tables:
        op.create_table('apikey',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('last_used_at', sa.DateTime(), nullable=True),
        sa.Column('total_uses', sa.Integer(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('api_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
        )
        with op.batch_alter_table('apikey', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_apikey_api_key'), ['api_key'], unique=True)
            batch_op.create_index(batch_op.f('ix_apikey_name'), ['name'], unique=False)
            batch_op.create_index(batch_op.f('ix_apikey_user_id'), ['user_id'], unique=False)

    if 'billingperiod' not in existing_tables:
        op.create_table('billingperiod',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=False),
        sa.Column('end_date', sa.DateTime(), nullable=False),
        sa.Column('subscription_plan_id', sa.Uuid(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('quota_override', sa.Float(), nullable=True),
        sa.Column('quota_used', sa.Float(), nullable=False),
        sa.Column('quota_remaining', sa.Float(), nullable=False),
        sa.Column('rollover_credits', sa.Float(), nullable=False),
        sa.Column('overage_credits', sa.Float(), nullable=False),
        sa.Column('overage_cost', sa.Float(), nullable=False),
        sa.Column('overage_limit_usd', sa.Float(), nullable=False),
        sa.Column('is_overage_limited', sa.Boolean(), nullable=False),
        sa.Column('has_reached_limit', sa.Boolean(), nullable=False),
        sa.Column('is_plan_change', sa.Boolean(), nullable=False),
        sa.Column('previous_plan_id', sa.Uuid(), nullable=True),
        sa.Column('invoiced', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscriptionplan.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('billingperiod', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_billingperiod_status'), ['status'], unique=False)
            batch_op.create_index(batch_op.f('ix_billingperiod_subscription_plan_id'), ['subscription_plan_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_billingperiod_user_id'), ['user_id'], unique=False)

    if 'daily_usage_summary' not in existing_tables:
        op.create_table('daily_usage_summary',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('flow_runs', sa.Integer(), nullable=False),
        sa.Column('kb_queries', sa.Integer(), nullable=False),
        sa.Column('api_calls', sa.Integer(), nullable=False),
        sa.Column('tokens_used', sa.Integer(), nullable=False),
        sa.Column('total_cost', sa.Float(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=True),
        sa.Column('billing_period_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['billing_period_id'], ['billingperiod.id'], ),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('daily_usage_summary', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_daily_usage_summary_date'), ['date'], unique=False)
            batch_op.create_index(batch_op.f('ix_daily_usage_summary_user_id'), ['user_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_daily_usage_summary_flow_id'), ['flow_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_daily_usage_summary_billing_period_id'), ['billing_period_id'], unique=False)

    if 'folder' not in existing_tables:
        op.create_table('folder',
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('parent_id', sa.Uuid(), nullable=True),
        sa.Column('user_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['parent_id'], ['folder.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'name', name='unique_folder_name')
        )
        with op.batch_alter_table('folder', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_folder_name'), ['name'], unique=False)

    if 'integrationtoken' not in existing_tables:
        op.create_table('integrationtoken',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('service_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('refresh_token', sa.String(), nullable=True),
        sa.Column('token_uri', sa.String(), nullable=True),
        sa.Column('client_id', sa.String(), nullable=True),
        sa.Column('client_secret', sa.String(), nullable=True),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('last_history_id', sa.String(), nullable=True),
        sa.Column('channel_id', sa.String(), nullable=True),
        sa.Column('watch_expiration', sa.DateTime(), nullable=True),
        sa.Column('email_address', sa.String(), nullable=True),
        sa.Column('integration_metadata', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
        )
        with op.batch_alter_table('integrationtoken', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_integrationtoken_service_name'), ['service_name'], unique=False)
            batch_op.create_index(batch_op.f('ix_integrationtoken_user_id'), ['user_id'], unique=False)

    if 'variable' not in existing_tables:
        op.create_table('variable',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('default_fields', sa.JSON(), nullable=True),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )

    if 'flow' not in existing_tables:
        op.create_table('flow',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('icon_bg_color', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('gradient', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('is_component', sa.Boolean(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('webhook', sa.Boolean(), nullable=True),
        sa.Column('endpoint_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('data', sa.JSON(), nullable=True),
        sa.Column('user_id', sa.Uuid(), nullable=True),
        sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('tags', sa.JSON(), nullable=True),
        sa.Column('locked', sa.Boolean(), nullable=True),
        sa.Column('folder_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['folder_id'], ['folder.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('user_id', 'endpoint_name', name='unique_flow_endpoint_name'),
        sa.UniqueConstraint('user_id', 'name', name='unique_flow_name')
        )
        with op.batch_alter_table('flow', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_flow_description'), ['description'], unique=False)
            batch_op.create_index(batch_op.f('ix_flow_endpoint_name'), ['endpoint_name'], unique=False)
            batch_op.create_index(batch_op.f('ix_flow_folder_id'), ['folder_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_flow_name'), ['name'], unique=False)
            batch_op.create_index(batch_op.f('ix_flow_user_id'), ['user_id'], unique=False)

    if 'invoice' not in existing_tables:
        op.create_table('invoice',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('billing_period_id', sa.Uuid(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('paid_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['billing_period_id'], ['billingperiod.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('invoice', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_invoice_user_id'), ['user_id'], unique=False)

    if 'flow_wizard_metadata' not in existing_tables:
        op.create_table('flow_wizard_metadata',
        sa.Column('wizard_metadata', sa.JSON(), nullable=True),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
        )
        with op.batch_alter_table('flow_wizard_metadata', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_flow_wizard_metadata_flow_id'), ['flow_id'], unique=False)

    if 'integrationtrigger' not in existing_tables:
        op.create_table('integrationtrigger',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('integration_id', sa.Uuid(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.ForeignKeyConstraint(['integration_id'], ['integrationtoken.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('integrationtrigger', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_integrationtrigger_flow_id'), ['flow_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_integrationtrigger_integration_id'), ['integration_id'], unique=False)

    if 'message' not in existing_tables:
        op.create_table('message',
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('sender', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('sender_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('text', sa.Text(), nullable=True),
        sa.Column('error', sa.Boolean(), nullable=False),
        sa.Column('edit', sa.Boolean(), nullable=False),
        sa.Column('files', sa.JSON(), nullable=True),
        sa.Column('properties', sa.JSON(), nullable=True),
        sa.Column('category', sa.Text(), nullable=True),
        sa.Column('content_blocks', sa.JSON(), nullable=True),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.PrimaryKeyConstraint('id')
        )

    if 'transaction' not in existing_tables:
        op.create_table('transaction',
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('vertex_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('target_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('inputs', sa.JSON(), nullable=True),
        sa.Column('outputs', sa.JSON(), nullable=True),
        sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('flow_id', sa.Uuid(), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.PrimaryKeyConstraint('id')
        )

    if 'usagerecord' not in existing_tables:
        op.create_table('usagerecord',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('user_id', sa.Uuid(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=False),
        sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('fixed_cost', sa.Float(), nullable=False),
        sa.Column('llm_cost', sa.Float(), nullable=False),
        sa.Column('tools_cost', sa.Float(), nullable=False),
        sa.Column('kb_cost', sa.Float(), nullable=False),
        sa.Column('app_margin', sa.Float(), nullable=False),
        sa.Column('total_cost', sa.Float(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('billing_period_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['billing_period_id'], ['billingperiod.id'], ),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('usagerecord', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_usagerecord_flow_id'), ['flow_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_usagerecord_session_id'), ['session_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_usagerecord_user_id'), ['user_id'], unique=False)

    if 'vertex_build' not in existing_tables:
        op.create_table('vertex_build',
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('data', sa.JSON(), nullable=True),
        sa.Column('artifacts', sa.JSON(), nullable=True),
        sa.Column('params', sa.Text(), nullable=True),
        sa.Column('valid', sa.Boolean(), nullable=False),
        sa.Column('flow_id', sa.Uuid(), nullable=False),
        sa.Column('build_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
        sa.PrimaryKeyConstraint('build_id')
        )

    if 'kbusagedetail' not in existing_tables:
        op.create_table('kbusagedetail',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('usage_record_id', sa.Uuid(), nullable=False),
        sa.Column('kb_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('count', sa.Integer(), nullable=False),
        sa.Column('cost', sa.Float(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['usage_record_id'], ['usagerecord.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('kbusagedetail', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_kbusagedetail_usage_record_id'), ['usage_record_id'], unique=False)

    if 'tokenusagedetail' not in existing_tables:
        op.create_table('tokenusagedetail',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('usage_record_id', sa.Uuid(), nullable=False),
        sa.Column('model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('input_tokens', sa.Integer(), nullable=False),
        sa.Column('output_tokens', sa.Integer(), nullable=False),
        sa.Column('cost', sa.Float(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['usage_record_id'], ['usagerecord.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('tokenusagedetail', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_tokenusagedetail_usage_record_id'), ['usage_record_id'], unique=False)

    if 'toolusagedetail' not in existing_tables:
        op.create_table('toolusagedetail',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('usage_record_id', sa.Uuid(), nullable=False),
        sa.Column('tool_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('count', sa.Integer(), nullable=False),
        sa.Column('cost', sa.Float(), nullable=False),
        sa.Column('is_premium', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['usage_record_id'], ['usagerecord.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('toolusagedetail', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_toolusagedetail_usage_record_id'), ['usage_record_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_tables = inspector.get_table_names()
    
    if 'toolusagedetail' in existing_tables:
        with op.batch_alter_table('toolusagedetail', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_toolusagedetail_usage_record_id'))
        op.drop_table('toolusagedetail')
    
    if 'tokenusagedetail' in existing_tables:
        with op.batch_alter_table('tokenusagedetail', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_tokenusagedetail_usage_record_id'))
        op.drop_table('tokenusagedetail')
    
    if 'kbusagedetail' in existing_tables:
        with op.batch_alter_table('kbusagedetail', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_kbusagedetail_usage_record_id'))
        op.drop_table('kbusagedetail')
    
    if 'vertex_build' in existing_tables:
        op.drop_table('vertex_build')
    
    if 'usagerecord' in existing_tables:
        with op.batch_alter_table('usagerecord', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_usagerecord_user_id'))
            batch_op.drop_index(batch_op.f('ix_usagerecord_session_id'))
            batch_op.drop_index(batch_op.f('ix_usagerecord_flow_id'))
        op.drop_table('usagerecord')
    
    if 'transaction' in existing_tables:
        op.drop_table('transaction')
    
    if 'message' in existing_tables:
        op.drop_table('message')
    
    if 'integrationtrigger' in existing_tables:
        with op.batch_alter_table('integrationtrigger', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_integrationtrigger_integration_id'))
            batch_op.drop_index(batch_op.f('ix_integrationtrigger_flow_id'))
        op.drop_table('integrationtrigger')
    
    if 'flow_wizard_metadata' in existing_tables:
        with op.batch_alter_table('flow_wizard_metadata', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_flow_wizard_metadata_flow_id'))
        op.drop_table('flow_wizard_metadata')
    
    if 'invoice' in existing_tables:
        with op.batch_alter_table('invoice', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_invoice_user_id'))
        op.drop_table('invoice')
    
    if 'flow' in existing_tables:
        with op.batch_alter_table('flow', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_flow_user_id'))
            batch_op.drop_index(batch_op.f('ix_flow_name'))
            batch_op.drop_index(batch_op.f('ix_flow_folder_id'))
            batch_op.drop_index(batch_op.f('ix_flow_endpoint_name'))
            batch_op.drop_index(batch_op.f('ix_flow_description'))
        op.drop_table('flow')
    
    if 'variable' in existing_tables:
        op.drop_table('variable')
    
    if 'integrationtoken' in existing_tables:
        with op.batch_alter_table('integrationtoken', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_integrationtoken_user_id'))
            batch_op.drop_index(batch_op.f('ix_integrationtoken_service_name'))
        op.drop_table('integrationtoken')
    
    if 'folder' in existing_tables:
        with op.batch_alter_table('folder', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_folder_name'))
        op.drop_table('folder')
    
    if 'daily_usage_summary' in existing_tables:
        with op.batch_alter_table('daily_usage_summary', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_daily_usage_summary_user_id'))
            batch_op.drop_index(batch_op.f('ix_daily_usage_summary_flow_id'))
            batch_op.drop_index(batch_op.f('ix_daily_usage_summary_date'))
            batch_op.drop_index(batch_op.f('ix_daily_usage_summary_billing_period_id'))
        op.drop_table('daily_usage_summary')
    
    if 'billingperiod' in existing_tables:
        with op.batch_alter_table('billingperiod', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_billingperiod_user_id'))
        op.drop_table('billingperiod')
    
    if 'user' in existing_tables:
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_user_username'))
            batch_op.drop_index(batch_op.f('ix_user_subscription_plan_id'))
        op.drop_table('user')
    
    if 'apikey' in existing_tables:
        with op.batch_alter_table('apikey', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_apikey_name'))
            batch_op.drop_index(batch_op.f('ix_apikey_key'))
        op.drop_table('apikey')
    
    if 'subscriptionplan' in existing_tables:
        with op.batch_alter_table('subscriptionplan', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_subscriptionplan_name'))
        op.drop_table('subscriptionplan')
    # ### end Alembic commands ###
